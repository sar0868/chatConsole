Курсовые проекты уровня BASIC
Общая постановка: в качестве подведения итогов курса вам необходимо реализовать практический курсовой проект, который будет включать в себя темы, изученные и закрепленные вами на курсе. Темы курсовых проектов: «Консольный файловый менеджер», «Консольный сетевой чат», «Веб-сервер». Вы можете придумать и свою тему, предварительно согласовав ее с преподавателем.

Проект «Консольный файловый менеджер»
Сложность: 2
Цель работы: применить полученные на курсе знания
Задание: реализовать консольный файловый менеджер на java.io (где удобно, можно использовать java.nio), который имеет следующие следующие возможности:
•	ls – распечатать список файлов текущего каталога. Если добавлен ключ -i, то должна быть более подробная информация о файлах: имя – размер – дата последнего изменения
•	cd [path] – переход в указанную поддиректорию. cd .. – переход в родительский каталог.
•	mkdir [name] – создание новой директории с указанным именем
•	rm [filename] – удаление указанного файла или директории (* возможность удаления не пустого каталога)
•	mv [source] [destination] – переименовать/перенести файл или директорию
•	cp [source] [destination] – скопировать файл
•	* Для mv, cp выдавать предупреждение что указанный файл в точке назначения уже существует. Добавить ключ -f чтобы принудительно переписывать файл в точке назначения
•	finfo [filename] – получить подробную информацию о файле
•	help – вывод в консоль всех поддерживаемых команд
•	* find [filename] – найти файл с указанным именем в текущем каталоге или любом его подкаталоге
•	exit – завершить работу
Проект «Сетевой чат»
Сложность: 4
Примечание: проект является продолжением чата, реализованного на курсе
Цель работы: применить полученные на курсе знания
Задание: реализовать клиент-серверное приложение «Сетевой чат» на java.io, которое имеет следующие возможности:
Серверная часть:
•	Запуск ServerSocket, прослушивание определенного порта и ожидание подключений
•	Обработка каждого подключения в отдельном потоке
•	Получение от клиентов сообщений: служебных команд и сообщений чата
•	Возможность регистрации и авторизации клиентов, с хранением данных о клиентах в базе данных
•	Рассылка сообщений всем авторизованным клиентам
•	Сервер к сообщениям должен добавлять время рассылки
•	Поддержка личных сообщений
•	Возможность изменения ника клиента по его запросу
•	Рассылка списка активных клиентов
•	Автоматическое отключение клиентов, которые не активны более 20 минут
•	Поддержка ролей пользователей (admin, user)
•	Возможность банить клиентов, баны могут быть по времени или перманентные (так может делать админ)
•	Возможность остановить сервер командой /shutdown
•	* Добавить систему отдельных комнат. Есть общая комната куда все клиенты попадают по-умолчанию. Любой клиент может создать собственную комнату, и повесить на нее пароль. Можно запрашивать список комнат. Можно заходить в созданные комнаты, командой /enter [room_name] [room_pass, если он есть]. В одно время пользователь может находиться только в одной комнате. * При подключении можно ему отправлять историю сообщений из этой комнаты. Если в комнату давно никто не заходил (7+ дней), то она удаляется. У каждой комнаты есть владелец, один юзер не может владеть более чем 5 комнатами.
•	* Защита от спам-сообщений, нельзя в [какой-то диапазон времени] отправлять больше N сообщений
•	* Фильтр плохих слов
Клиентская часть:
•	Возможность подключиться к серверу
•	Возможность отправлять и получать сообщения
•	Возможность отключаться от сервера с помощью команды /exit
Общие вопросы:
•	Все служебные действия могут выполняться через обычные сообщения, начинающиеся с /
•	/register – регистрация
•	/auth – аутентификация
•	/w – личное сообщение
•	/exit – выход (для клиента)
•	/shutdown – остановка сервера (для админа)
•	/ban – бан пользователя
•	/activelist – список активных клиентов
•	/changenick – смена ника
•	* команды для управления комнатами может придумать самостоятельно

Проект «Викторина»
Сложность: 8
Примечание: проект является подобием чата
Цель работы: применить полученные на курсе знания
Задание: реализовать клиент-серверное приложение «Викторина» на java.io, которое имеет следующие возможности:
Серверная часть:
•	Запуск ServerSocket, прослушивание определенного порта и ожидание подключений
•	Обработка каждого подключения в отдельном потоке
•	Необходимы регистрация и аутентификация клиентов через БД (User: login, password, nickname, likes)
•	Пользователь создает файл с викториной (20 вопросов) и отправляет на сервер, сервер регистрирует викторину в БД и тут же ее запускает
•	Можно по расписанию удалять старые викторину
•	Клиенты могут запросить список викторин, и подключиться к одной из них. Одну викторину можно пройти только один раз
•	При подключении сервер последовательно отправляет вопросы клиенту и дает по 20 секунд на ответ, выполняется стандартная работа по подсчету ответов клиента
•	У клиента запрашивается балл 1-10 насколько понравилась викторина
•	После всех ответов в БД записываются результаты и клиенту отправляется таблица результатов
Клиентская часть:
•	Возможность подключиться к серверу
•	Возможность отправлять команды и получать сообщения от сервера
•	Возможность отключаться от сервера с помощью команды /exit
Общие вопросы:
•	/register – регистрация
•	/auth – аутентификация
•	/join quiz_name – подключиться к викторине
•	/quizes – запросить список викторин
•	/help – получить список команд
•	/exit – выход (для клиента)

Проект «Веб-сервер»
Сложность: 5-10
Примечание: проект является продолжением веб-сервера, реализованного на курсе
Цель работы: применить полученные на курсе знания
Задание: доработать веб-сервер:
•	Подключить базу данных
•	Реализовать полный набор CRUD операций над продуктами (все действия должны влиять на продукты в базе данных):
o	GET /items – получение всех продуктов
o	GET /items?id=1 – получение продукта, с указанным id (или более правильный, но сложный вариант /items/{id} – использование PathVariable)
o	POST /items – создание нового продукта
o	PUT /items – модификация продукта
o	DELETE /items?id=1 – удаление продукта с указанным id
•	При запросе GET /[имя_файла] возвращать в теле ответа указанный файл из папки static
•	Сделать единую точку обработки исключений, с преобразованием их в 400/500 ответы
•	Оптимизировать парсинг запроса
•	Можно сделать так, чтобы при запуске было возможно указывать используемый порт
•	* В заголовке запроса Accept можно указывать тип ожидаемого ответа (например, text/html или application/json, и сервер либо должен вернуть ответ указанного типа, либо ошибку 406 Not Acceptable). Соответственно, каждый Processor должен понимать данными какого типа он отвечает. Если в запросе такой хедер не указан, то считаем что он равен */*

